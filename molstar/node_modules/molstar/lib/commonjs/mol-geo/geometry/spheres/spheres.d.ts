/**
 * Copyright (c) 2019-2023 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
import { ValueCell } from '../../../mol-util';
import { GeometryUtils } from '../geometry';
import { ParamDefinition as PD } from '../../../mol-util/param-definition';
import { TextureImage } from '../../../mol-gl/renderable/util';
import { Sphere3D } from '../../../mol-math/geometry';
import { GroupMapping } from '../../util';
import { Vec2 } from '../../../mol-math/linear-algebra';
export interface Spheres {
    readonly kind: 'spheres';
    /** Number of spheres */
    sphereCount: number;
    /** Center buffer as array of xyz values wrapped in a value cell */
    readonly centerBuffer: ValueCell<Float32Array>;
    /** Group buffer as array of group ids for each vertex wrapped in a value cell */
    readonly groupBuffer: ValueCell<Float32Array>;
    /** Bounding sphere of the spheres */
    readonly boundingSphere: Sphere3D;
    /** Maps group ids to sphere indices */
    readonly groupMapping: GroupMapping;
    setBoundingSphere(boundingSphere: Sphere3D): void;
    shaderData: Spheres.ShaderData;
}
export declare namespace Spheres {
    interface ShaderData {
        readonly positionGroup: ValueCell<TextureImage<Float32Array>>;
        readonly texDim: ValueCell<Vec2>;
        update(): void;
    }
    function create(centers: Float32Array, groups: Float32Array, sphereCount: number, spheres?: Spheres): Spheres;
    function createEmpty(spheres?: Spheres): Spheres;
    const Params: {
        sizeFactor: PD.Numeric;
        doubleSided: PD.BooleanParam;
        ignoreLight: PD.BooleanParam;
        xrayShaded: PD.Select<boolean | "inverted">;
        transparentBackfaces: PD.Select<string>;
        solidInterior: PD.BooleanParam;
        clipPrimitive: PD.BooleanParam;
        approximate: PD.BooleanParam;
        alphaThickness: PD.Numeric;
        bumpFrequency: PD.Numeric;
        bumpAmplitude: PD.Numeric;
        alpha: PD.Numeric;
        quality: PD.Select<"auto" | "medium" | "high" | "low" | "custom" | "highest" | "higher" | "lower" | "lowest">;
        material: PD.Group<PD.Normalize<{
            metalness: number;
            /** Number of spheres */
            roughness: number;
            bumpiness: number;
        }>>;
        clip: PD.Group<PD.Normalize<{
            variant: import("../../../mol-util/clip").Clip.Variant;
            objects: PD.Normalize<{
                type: any;
                invert: any;
                position: any;
                rotation: any;
                scale: any;
            }>[];
        }>>;
        instanceGranularity: PD.BooleanParam;
    };
    type Params = typeof Params;
    const Utils: GeometryUtils<Spheres, Params>;
}
