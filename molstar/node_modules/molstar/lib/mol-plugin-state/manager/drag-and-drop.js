/**
 * Copyright (c) 2023 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 */
import { __awaiter, __generator } from "tslib";
import { OpenFiles } from '../actions/file';
import { Asset } from '../../mol-util/assets';
import { PluginCommands } from '../../mol-plugin/commands';
var DragAndDropManager = /** @class */ (function () {
    function DragAndDropManager(plugin) {
        this.plugin = plugin;
        this.handlers = [];
    }
    DragAndDropManager.prototype.addHandler = function (name, handler) {
        var index = this.handlers.findIndex(function (h) { return h[0] === name; });
        if (index < 0)
            this.handlers.push([name, handler]);
        else
            this.handlers[index][1] = handler;
    };
    DragAndDropManager.prototype.removeHandler = function (name) {
        var index = this.handlers.findIndex(function (h) { return h[0] === name; });
        if (index >= 0)
            this.handlers.splice(index, 1);
    };
    DragAndDropManager.prototype.handle = function (files) {
        return __awaiter(this, void 0, void 0, function () {
            var i, handler, handled;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i = this.handlers.length - 1;
                        _a.label = 1;
                    case 1:
                        if (!(i >= 0)) return [3 /*break*/, 4];
                        handler = this.handlers[i][1];
                        return [4 /*yield*/, handler(files, this.plugin)];
                    case 2:
                        handled = _a.sent();
                        if (handled)
                            return [2 /*return*/];
                        _a.label = 3;
                    case 3:
                        i--;
                        return [3 /*break*/, 1];
                    case 4:
                        defaultDragAndDropHandler(this.plugin, files);
                        return [2 /*return*/];
                }
            });
        });
    };
    return DragAndDropManager;
}());
export { DragAndDropManager };
function defaultDragAndDropHandler(plugin, files) {
    var sessions = files.filter(function (f) {
        var fn = f.name.toLowerCase();
        return fn.endsWith('.molx') || fn.endsWith('.molj');
    });
    if (sessions.length > 0) {
        PluginCommands.State.Snapshots.OpenFile(plugin, { file: sessions[0] });
    }
    else {
        plugin.runTask(plugin.state.data.applyAction(OpenFiles, {
            files: files.map(function (f) { return Asset.File(f); }),
            format: { name: 'auto', params: {} },
            visuals: true
        }));
    }
}
